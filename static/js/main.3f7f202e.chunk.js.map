{"version":3,"sources":["ThreeVariables/VariableNames.js","ThreeVariables/TableHeader.js","ThreeVariables/Answer.js","ThreeVariables/Answers.js","ThreeVariables/FirstBodySection.js","ThreeVariables/SecondBodySection.js","ThreeVariables/TableBody.js","ThreeVariables/Table.js","Integram.js","customHooks/useHashResults.js","App.js","serviceWorker.js","index.js"],"names":["VariableNames","names","map","name","index","classname","length","className","key","TableHeader","intergram","dimensions","dimension2","dimension3","variables","colSpan","removeHoverClass","document","querySelectorAll","forEach","element","classList","remove","addHoverClass","event","currentTarget","hoveredIndex","Array","from","parentElement","indexOf","td","add","Answer","answer","value","rest","onMouseEnter","onMouseLeave","onClick","newValue","Number","hash","window","location","slice","substring","Answers","dimension","integram","results","startIndex","lastRow","dimensionVariables","dimensionVariable","push","join","FirstBodySection","dimension1","dimension1Variables","dimension1Variable","isLastRow","rowSpan","variable","SecondBodySection","dimension3Variables","secondSectionIndex","dimension3Variable","TableBody","Table","Integram","useState","setResults","setResult","useCallback","Object","keys","numberOfAnswers","i","j","split","useEffect","addEventListener","fill","removeEventListener","useHashResults","introduction","clues","clue","App","id","URL","searchParams","get","json","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f7f202e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst VariableNames = ({ names }) => {\n  return names.map((name, index) => {\n    let classname = \"top-variable-name\";\n    if (index === 0) {\n      classname += \" left\";\n    } else if (index === names.length - 1) {\n      classname += \" right\";\n    }\n    return (\n      <th className={classname} key={name}>\n        {name}\n      </th>\n    );\n  });\n};\n\nexport default VariableNames;\n","import React from \"react\";\nimport VariableNames from \"./VariableNames\";\n\nconst TableHeader = ({ intergram }) => {\n  const [, dimension2, dimension3] = intergram.dimensions;\n  const variables = intergram.variables;\n  return (\n    <thead>\n      <tr>\n        <th colSpan=\"2\"></th>\n        <th className=\"top-dimension\" colSpan={variables[dimension2].length}>\n          {dimension2}\n        </th>\n        <th className=\"top-dimension\" colSpan={variables[dimension3].length}>\n          {dimension3}\n        </th>\n      </tr>\n      <tr>\n        <th colSpan=\"2\"></th>\n        <VariableNames names={variables[dimension2]} />\n        <VariableNames names={variables[dimension3]} />\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHeader;\n","import React from \"react\";\n\nconst removeHoverClass = () => {\n  document\n    .querySelectorAll(\"table td.hover\")\n    .forEach((element) => element.classList.remove(\"hover\"));\n};\n/**\n * @param {MouseEvent} event\n */\nconst addHoverClass = (event) => {\n  const element = event.currentTarget;\n  const hoveredIndex = Array.from(\n    element.parentElement.querySelectorAll(\"td\")\n  ).indexOf(element);\n  document\n    .querySelectorAll(`table td:nth-of-type(${hoveredIndex + 1})`)\n    .forEach((td) => td.classList.add(\"hover\"));\n};\n\nconst Answer = ({ value, index, ...rest }) => {\n  const changeHash = () => {\n    const newValue = (Number(value) + 1) % 3;\n    const hash = window.location.hash.slice(1);\n    window.location.hash =\n      hash.substring(0, index) + newValue + hash.substring(index + 1);\n  };\n  let answer;\n  switch (value) {\n    case \"2\":\n      answer = <>&nbsp;</>;\n      break;\n    case \"0\":\n      answer = \"X\";\n      break;\n    case \"1\":\n      answer = \"O\";\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <td {...rest} onMouseEnter={addHoverClass} onMouseLeave={removeHoverClass}>\n      <button onClick={changeHash}>{answer}</button>\n    </td>\n  );\n};\n\nexport default Answer;\n","import React from \"react\";\nimport Answer from \"./Answer\";\n\nconst Answers = ({ dimension, integram, results, startIndex, lastRow }) => {\n  const dimensionVariables = integram.variables[dimension];\n  return dimensionVariables.map((dimensionVariable, index) => {\n    const classname = [];\n    if (lastRow) {\n      classname.push(\"bottom\");\n    }\n    if (index === dimensionVariables.length - 1) {\n      classname.push(\"right\");\n    }\n    return (\n      <Answer\n        key={dimensionVariable}\n        value={results[startIndex + index]}\n        index={startIndex + index}\n        className={classname.join(\" \")}\n      />\n    );\n  });\n};\n\nexport default Answers;\n","import React from \"react\";\nimport Answers from \"./Answers\";\n\nconst FirstBodySection = ({ integram, results }) => {\n  const { variables, dimensions } = integram;\n  const [dimension1, dimension2, dimension3] = dimensions;\n  const dimension1Variables = variables[dimension1];\n  return dimension1Variables.map((dimension1Variable, index) => {\n    let classname = \"left-variable-name\";\n    const isLastRow = index === dimension1Variables.length - 1;\n    if (index === 0) {\n      classname += \" top\";\n    } else if (isLastRow) {\n      classname += \" bottom\";\n    }\n    return (\n      <tr key={dimension1Variable}>\n        {index === 0 && (\n          <th className=\"left-dimension\" rowSpan={variables[dimension1].length}>\n            {dimension1}\n          </th>\n        )}\n        <th className={classname}>{dimension1Variable}</th>\n        <Answers\n          dimension={dimension2}\n          integram={integram}\n          results={results}\n          startIndex={\n            index *\n            (variables[dimension2].length + variables[dimension3].length)\n          }\n          lastRow={isLastRow}\n        />\n        <Answers\n          variable={dimension1Variable}\n          dimension={dimension3}\n          integram={integram}\n          results={results}\n          startIndex={\n            variables[dimension2].length +\n            index *\n              (variables[dimension2].length + variables[dimension3].length)\n          }\n          lastRow={isLastRow}\n        />\n      </tr>\n    );\n  });\n};\n\nexport default FirstBodySection;\n","import React from \"react\";\nimport Answers from \"./Answers\";\n\nconst SecondBodySection = ({ integram, results }) => {\n  const { variables, dimensions } = integram;\n  const [dimension1, dimension2, dimension3] = dimensions;\n\n  const dimension3Variables = variables[dimension3];\n  const secondSectionIndex =\n    (variables[dimension2].length + dimension3Variables.length) *\n    variables[dimension1].length;\n\n  return dimension3Variables.map((dimension3Variable, index) => {\n    let classname = \"left-variable-name\";\n    const isLastRow = index === dimension3Variables.length - 1;\n    if (index === 0) {\n      classname += \" top\";\n    } else if (isLastRow) {\n      classname += \" bottom\";\n    }\n    return (\n      <tr key={dimension3Variable}>\n        {index === 0 && (\n          <th className=\"left-dimension\" rowSpan={dimension3Variables.length}>\n            {dimension3}\n          </th>\n        )}\n        <th className={classname}>{dimension3Variable}</th>\n        <Answers\n          dimension={dimension2}\n          integram={integram}\n          results={results}\n          startIndex={index * variables[dimension2].length + secondSectionIndex}\n          lastRow={isLastRow}\n        />\n      </tr>\n    );\n  });\n};\n\nexport default SecondBodySection;\n","import React from \"react\";\nimport FirstBodySection from \"./FirstBodySection\";\nimport SecondBodySection from \"./SecondBodySection\";\n\nconst TableBody = ({ integram, results }) => {\n  return (\n    <tbody>\n      <FirstBodySection integram={integram} results={results} />\n      <SecondBodySection integram={integram} results={results} />\n    </tbody>\n  );\n};\n\nexport default TableBody;\n","import React from \"react\";\n\nimport TableHeader from \"./TableHeader\";\nimport TableBody from \"./TableBody\";\n\nfunction Table({ integram, results }) {\n  return (\n    <table>\n      <TableHeader intergram={integram} />\n      <TableBody integram={integram} results={results} />\n    </table>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\n\nimport { useHashResults } from \"./customHooks/useHashResults\";\n\nimport Table from \"./ThreeVariables/Table\";\n\nfunction Integram({ integram }) {\n  const results = useHashResults(integram);\n\n  if (!results.length) {\n    return null;\n  }\n  return (\n    <>\n      <p>{integram.introduction}</p>\n      <ol>\n        {integram.clues.map((clue, index) => (\n          <li key={index}>{clue}</li>\n        ))}\n      </ol>\n      <Table integram={integram} results={results} />\n    </>\n  );\n}\n\nexport default Integram;\n","import { useState, useCallback, useEffect } from \"react\";\n\nexport const useHashResults = (integram) => {\n  const [results, setResults] = useState([]);\n  const setResult = useCallback(() => {\n    const hash = window.location.hash.slice(1);\n    // check what is the number of variables required\n    const { variables } = integram;\n    const names = Object.keys(variables);\n    let numberOfAnswers = 0;\n    for (let i = 0; i < names.length - 1; i += 1) {\n      for (let j = i + 1; j < names.length; j++) {\n        numberOfAnswers +=\n          variables[names[i]].length * variables[names[j]].length;\n      }\n    }\n    if (hash && hash.length === numberOfAnswers) {\n      setResults(hash.split(\"\"));\n    }\n  }, [integram]);\n  useEffect(() => {\n    window.addEventListener(\"hashchange\", setResult);\n    const hash = window.location.hash.slice(1);\n    // check what is the number of variables required\n    const { variables } = integram;\n    const names = Object.keys(variables);\n    let numberOfAnswers = 0;\n    for (let i = 0; i < names.length - 1; i += 1) {\n      for (let j = i + 1; j < names.length; j++) {\n        numberOfAnswers +=\n          variables[names[i]].length * variables[names[j]].length;\n      }\n    }\n    if (!hash || hash.length !== numberOfAnswers) {\n      window.location.hash = Array(numberOfAnswers).fill(2).join(\"\");\n    }\n    setResults(hash.split(\"\"));\n    return () => window.removeEventListener(\"hashchange\", setResult);\n  }, [integram, setResult]);\n  return results;\n};\n","import React from \"react\";\nimport Integram from \"./Integram\";\nimport json from \"./data/intergram.json\";\n\nfunction App() {\n  const id = new URL(document.location).searchParams.get(\"id\");\n  if (!id || !json[id]) {\n    return <p>Integram sa ovim ID-jem ne postoji</p>;\n  }\n  return <Integram integram={json[id]} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}